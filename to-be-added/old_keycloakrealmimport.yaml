apiVersion: k8s.keycloak.org/v2alpha1
kind: KeycloakRealmImport
metadata:
  name: my-realm-import
  labels:
    app: sso  
  namespace: '{{ .Values.keycloak.namespaceName }}'
  annotations:
    argocd.argoproj.io/sync-wave: "3"
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  keycloakCRName: '{{ .Values.keycloak.instanceName }}'
  realm:
    id: backstage
    realm: backstage
    enabled: true
    users:
      - username: user1
        enabled: true
        emailVerified: true
        email: user1@example.com
        credentials:
          - type: password
            value: user1       
      - username: service-account-backstage
        emailVerified: false
        enabled: true
        totp: false
        serviceAccountClientId: backstage
        disableableCredentialTypes: []
        requiredActions: []
        realmRoles:
          - myrole
          - default-roles-backstage
        groups: []                    
    roles:
      realm:
        - name: myrole
          description: A custom role
          composite: true
          composites:
            client:
              realm-management:
                - view-clients
                - query-groups
                - query-clients
                - view-users
          clientRole: false          
    clients:
      - clientId: backstage
        name: backstage
        protocol: openid-connect
        enabled: true
        publicClient: false
        secret: my-predefined-client-secret
        redirectUris:
          - "https://backstage.{{ .Values.cluster.domain }}/api/auth/oidc/handler/frame"
        webOrigins:
          - "https://backstage.{{ .Values.cluster.domain }}"
        consentRequired: false
        standardFlowEnabled: true
        implicitFlowEnabled: true
        directAccessGrantsEnabled: true
        serviceAccountsEnabled: true
        publicClient: false
        frontchannelLogout: false
        protocol: openid-connect