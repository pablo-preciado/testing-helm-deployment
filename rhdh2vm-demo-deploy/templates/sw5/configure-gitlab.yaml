kind: Job
apiVersion: batch/v1
metadata:
  name: configure-gitlab
  namespace: openshift-gitops
  annotations:
    argocd.argoproj.io/sync-wave: "5"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: resources-checker
      containers:
        - name: configure-gitlab
          image: registry.redhat.io/openshift4/ose-cli
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
            - '-c'
            - |
              # Variables
              GITLAB_URL="https://gitlab.{{ .Values.cluster.domain }}"
              ROOT_USER="root"
              ROOT_PASS=$(oc get secret/gitlab-gitlab-initial-root-password -n gitlab-system -o jsonpath='{.data.password}' | base64 -d)
              GITHUB_PAT="{{ .Values.github.pat }}"
              GITHUB_REPO_1="{{ .Values.github.repo1 }}"
              GITLAB_REPO_1="{{ .Values.gitlab.repo1 }}"
              GITHUB_REPO_2="{{ .Values.github.repo2 }}"
              GITLAB_REPO_2="{{ .Values.gitlab.repo2 }}"
              
              # Authenticate and get GitLab access token
              echo "Authenticating with GitLab..."
              GITLAB_TOKEN=$(curl -s --request POST "$GITLAB_URL/oauth/token" --data "grant_type=password" --data "username=$ROOT_USER" --data "password=$ROOT_PASS" | grep -o '"access_token":"[^"]*' | cut -d: -f2 | tr -d '"')
              #GITLAB_TOKEN=$(curl -s --request POST "$GITLAB_URL/oauth/token" --data "grant_type=password" --data "username=$ROOT_USER" --data "password=$ROOT_PASS" | jq -r '.access_token')
              
              if [ -z "$GITLAB_TOKEN" ] || [ "$GITLAB_TOKEN" == "null" ]; then
                echo "Authentication failed. Check your credentials."
                exit 1
              fi
              
              echo "GitLab authentication successful. Token-> $GITLAB_TOKEN"
              
              # Create user1
              echo "Creating user1..."
              CREATE_USER=$(curl -s --header "Authorization: Bearer $GITLAB_TOKEN" --header "Content-Type: application/json" --request POST "$GITLAB_URL/api/v4/users" --data '{"email": "user1@example.com", "username": "user1", "name": "User One", "password": "'"$ROOT_PASS"'", "skip_confirmation": true}')
              #CREATE_USER=$(curl -s --header "Authorization: Bearer $GITLAB_TOKEN" --header "Content-Type: application/json" --request POST "$GITLAB_URL/api/v4/users" --data "$(cat <<EOF
              #{
              #  "email": "user1@example.com",
              #  "username": "user1",
              #  "name": "User One",
              #  "password": "$ROOT_PASS",
              #  "skip_confirmation": true
              #}
              #EOF
              #)")
              
              echo "User1 creation response-> $CREATE_USER"
              
              USER_ID=$(echo "$CREATE_USER" | sed -n 's/.*"id":\([0-9]*\).*/\1/p')
              #USER_ID=$(echo "$CREATE_USER" | jq -r '.id')

              if [ -z "$USER_ID" ] || [ "$USER_ID" == "null" ]; then
                echo "Failed to create user1. Response-> $CREATE_USER"
                exit 1
              fi
              
              echo "User1 created successfully. User ID-> $USER_ID"
              
              # Enable GitHub import capability
              echo "Enabling GitHub import capability..."
              curl -s --header "Authorization: Bearer $GITLAB_TOKEN" \
                --request PUT "$GITLAB_URL/api/v4/application/settings" \
                --data "import_sources[]=github" > /dev/null
              
              echo "GitHub import capability enabled."
              
              # Import GitHub repositories
              echo "Importing GitHub repository 1-> $GITHUB_REPO_1"
              
              # Retrieve repository details
              GITHUB_REPO_API=$(echo "$GITHUB_REPO_1" | sed -E 's|https://github.com/||')
              REPO_DETAILS=$(curl -s "https://api.github.com/repos/$GITHUB_REPO_API")
              
              # Extract the numeric repository ID
              REPO_ID=$(echo "$REPO_DETAILS" | grep -o '"id":\s*[0-9]*' | head -n 1 | awk -F ': ' '{print $2}')
              #REPO_ID=$(echo "$REPO_DETAILS" | jq -r '.id')
              
              echo "Repository ID-> $REPO_ID"
              
              IMPORT_REPO_1=$(curl -s --header "Authorization: Bearer $GITLAB_TOKEN" \
                --header "content-type: application/json" \
                --request POST "$GITLAB_URL/api/v4/import/github" \
                --data "{\"personal_access_token\": \"$GITHUB_PAT\", \"repo_id\": \"$REPO_ID\", \"target_namespace\": \"user1\", \"new_name\": \"$GITLAB_REPO_1\"}")

              echo $IMPORT_REPO_1
              
              _
              echo "Importing GitHub repository 2-> $GITHUB_REPO_2"
              
              # Retrieve repository details
              GITHUB_REPO_API=$(echo "$GITHUB_REPO_2" | sed -E 's|https://github.com/||')
              REPO_DETAILS=$(curl -s "https://api.github.com/repos/$GITHUB_REPO_API")
              
              # Extract the numeric repository ID
              REPO_ID=$(echo "$REPO_DETAILS" | grep -o '"id":\s*[0-9]*' | head -n 1 | awk -F ': ' '{print $2}')
              #REPO_ID=$(echo "$REPO_DETAILS" | jq -r '.id')
              
              echo "Repository ID-> $REPO_ID"
              
              IMPORT_REPO_2=$(curl -s --header "Authorization: Bearer $GITLAB_TOKEN" \
                --header "content-type: application/json" \
                --request POST "$GITLAB_URL/api/v4/import/github" \
                --data "{\"personal_access_token\": \"$GITHUB_PAT\", \"repo_id\": \"$REPO_ID\", \"target_namespace\": \"user1\", \"new_name\": \"$GITLAB_REPO_2\"}")

              echo $IMPORT_REPO_2
              
              echo "GitHub repositories imported successfully."